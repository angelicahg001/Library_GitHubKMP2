apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'

apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: "base"


android {
  compileSdkVersion 28
  defaultConfig {
    minSdkVersion 15
  }
  buildTypes {
    release {
      minifyEnabled true
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
}

//Config Bintray
def GROUP_ID="com.worldmobile"
def ARTIFACT_ID="core-github-kmp"

def BINTRAY_REPOSITORY="shared-kmp"
def BINTRAY_ORGINIZATION="angelicahg001"

def ISSUE_URL="https://github.com/angelicahg001/Library_GitHubKMP2/issues"
def SITE_URL="https://github.com/angelicahg001/Library_GitHubKMP2"
def VCS_URL="https://github.com/angelicahg001/Library_GitHubKMP2.git"
def LIBRARY_VERSION_NAME=1.0

kotlin {
  targets {
    final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") \
                              ? presets.iosArm64 : presets.iosX64

    fromPreset(iOSTarget, 'ios') {
      binaries {
        framework('shared')
      }
    }

    fromPreset(presets.android, 'android')
  }

  sourceSets {
    commonMain.dependencies {
      api 'org.jetbrains.kotlin:kotlin-stdlib-common'
      implementation "io.ktor:ktor-client-core:$ktor_version"
      implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
      implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
    }

    androidMain.dependencies {
      api 'org.jetbrains.kotlin:kotlin-stdlib'
      implementation "io.ktor:ktor-client-android:$ktor_version"
      implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinx_coroutines_version"
    }

    iosMain.dependencies {
      implementation "io.ktor:ktor-client-ios:$ktor_version"
      implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$kotlinx_coroutines_version"
      implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
    }
  }

  afterEvaluate {
    project.publishing.publications.all {
      groupId = GROUP_ID
      if (it.name.contains('metadata')) {
        artifactId = "$ARTIFACT_ID"
      } else {
        artifactId = "$ARTIFACT_ID-$name"
      }
    }
  }
/*
  def getBintrayUserProperty() {
    return hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
  }

  def getBintrayApiKeyProperty() {
    return hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')
  }
*/
  bintray {
    user = 'angelicahg001'
    key = 'a26d09e179fa941774753d4324ea91a2d4c39d1f'
    publish = false
    pkg {
      repo = BINTRAY_REPOSITORY
      name = ARTIFACT_ID
      userOrg = BINTRAY_ORGINIZATION
      licenses = ['Apache-2.0']
      vcsUrl = VCS_URL
      websiteUrl = SITE_URL
      issueTrackerUrl = ISSUE_URL

      version {
        name = LIBRARY_VERSION_NAME
        vcsTag = LIBRARY_VERSION_NAME
        released = new Date()
      }
    }
  }

  bintrayUpload.doFirst {
    publications = publishing.publications.collect {
      it.name
    }.findAll {
      it != "kotlinMultiplatform"
    }
  }

}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
  compileClasspath
}

task packForXCode(type: Sync) {
  final File frameworkDir = new File(buildDir, "xcode-frameworks")
  final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
  final def framework = kotlin.targets.ios.binaries.getFramework("shared", mode)

  inputs.property "mode", mode
  dependsOn framework.linkTask

  from { framework.outputFile.parentFile }
  into frameworkDir

  doLast {
    new File(frameworkDir, 'gradlew').with {
      text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
      setExecutable(true)
    }
  }
}

tasks.build.dependsOn packForXCode
